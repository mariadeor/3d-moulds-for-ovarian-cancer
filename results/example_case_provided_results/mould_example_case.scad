// Generated by SolidPython 1.1.3 on 2023-02-23 19:28:39


difference() {
	union() {
		translate(v = [0, 0, 4]) {
			difference() {
				linear_extrude(height = 27.451564059498924) {
					offset(r = 5) {
						polygon(points = [[-27.191022492710843, 24.44155607335321], [-27.638036300416704, 0.05935525378464019], [-27.612246652653575, -0.09996220740006131], [-27.591693960210485, -0.21999680786912923], [-27.535756885785855, -0.5138720547740043], [-27.431492664862805, -1.0351076503521466], [-26.25775546426791, -6.729483938458988], [-26.124000353650484, -7.346418154679845], [-25.94267918451656, -8.117144743956944], [-25.679573375805095, -9.208817663100008], [-25.45698852979988, -10.119416353080746], [-25.261624151799403, -10.910286475775958], [-25.108636252661586, -11.522501685826485], [-24.220708171921853, -15.073573102232245], [-24.066739688784033, -15.68462017423835], [-23.869316735929534, -16.445819192824604], [-23.584654830981496, -17.515374631476206], [-23.41947265318443, -18.093802429830795], [-23.33438681658186, -18.386938448866367], [-23.17004547143524, -18.88522980558259], [-23.09663565013128, -19.107464008786195], [-22.891711595856165, -19.620429774112296], [-22.60224568943652, -20.19537760396227], [-22.26210260143412, -20.77323712971803], [-22.242687520251863, -20.804312002645904], [-21.846892748942366, -21.371115949657952], [-21.38747481712851, -21.916525260866678], [-21.378454250003067, -21.926663514712367], [-21.35473674560212, -21.95033026589963], [-21.150927303196198, -22.146055739739914], [-20.85883591855977, -22.424295220474917], [-20.852689031897203, -22.429575442122868], [-20.835293727287453, -22.443438849903966], [-20.681860593818826, -22.56245037782816], [-20.270310190457632, -22.872482075844456], [-20.270158206065158, -22.872588907901022], [-20.26926558014436, -22.87317474844255], [-20.26556333381154, -22.875476023702234], [-19.620956433962053, -23.263956416570917], [-18.921155441519637, -23.605012562016746], [-18.18404688870633, -23.908761147091685], [-17.42349441654822, -24.189065812821827], [-16.650603039471797, -24.457031573633643], [-15.872379492769955, -24.71966516482004], [-15.092322737337392, -24.98046554727572], [-14.311781239211607, -25.240781187038177], [-13.531142792547184, -25.500999878261993], [-12.750508752634513, -25.761196535727027], [-11.970035559160959, -26.021276414270517], [-11.19049108862009, -26.28070519524197], [-10.414822907093072, -26.537793440186732], [-9.651476829743302, -26.788498780634132], [-8.919365395710924, -27.025138733451595], [-8.252482907745375, -27.235910571469685], [-7.700131794649113, -27.40607883979723], [-7.318983038936138, -27.52081886403387], [-7.157352189402746, -27.568743778386374], [-6.906159953703547, -27.63012524353892], [-1.0507628725267657, -27.6874923724895], [9.921376934359692, -27.569717548263014], [10.327826319322497, -27.562646276607055], [10.935825382281074, -27.54685963622775], [11.329857967245824, -27.531838686021327], [11.920217429360042, -27.500671004523902], [12.292184607579127, -27.474664977177035], [12.858438125304367, -27.422779648624868], [13.193908756675814, -27.38632545572787], [13.737735615982038, -27.31147667127757], [14.004303683010216, -27.272882483548567], [14.636843066105724, -27.161834264510055], [18.421650913423214, -26.41069471608553], [19.198076802864733, -26.24166402294786], [19.787370021907932, -26.08951769920724], [20.387464946085696, -25.89849747482028], [20.490068563787613, -25.86447146532517], [21.177578431761876, -25.609495739425334], [21.411913547794406, -25.51477339681512], [22.0691273472949, -25.205964197195655], [22.470713748644087, -24.965463211571834], [22.84577487968679, -24.65735850350288], [23.445537435031557, -24.066033981485738], [23.4724307109129, -24.03791176133464], [23.9369144078178, -23.510420622025933], [23.945008286431655, -23.500304006965653], [24.376177923064652, -22.94137122603333], [24.39356793412255, -22.917439494357723], [24.75811258329763, -22.40041027975006], [25.079970129880223, -21.899377795111747], [25.184072456545465, -21.73013279625039], [25.549346822021313, -21.119670388351967], [25.58930728005742, -21.052418269056194], [25.90592861854069, -20.50496600032629], [27.186602758875143, -18.28042164230681], [27.190375515573493, -18.273376877212527], [27.197211059651334, -18.260431132519113], [27.201878299669445, -18.251103379678856], [27.204143986194513, -18.246156753056106], [27.20499901887241, -18.244124489438875], [27.205230438327376, -18.24348518418285], [27.205272278966742, -18.243337384198046], [27.20527627288946, -18.24331472692854], [27.457476632514155, 4.899283874437154], [27.457004179103635, 4.901044532658746], [27.44172945290072, 4.9486235881406095], [23.929419999326353, 15.082134327276268], [23.650878034298835, 15.844449500136996], [23.352091451701764, 16.58652005542816], [23.022166761192956, 17.2974525028076], [22.651409108908034, 17.967551988410925], [22.23415141208808, 18.59115142947922], [21.769673758978154, 19.167525347290677], [21.268803134141738, 19.692043161959788], [21.26380419689791, 19.696933338659516], [20.755414729273177, 20.16064564067512], [20.269864197861207, 20.554655514852534], [19.78900416632247, 20.893768136123228], [19.624983906343477, 21.00198253869063], [18.956546218353953, 21.422394205395452], [18.402170169301883, 21.752565313170898], [17.851092377937427, 22.071971347976763], [16.3338983375694, 22.94936477342848], [15.699626251839437, 23.305614552155532], [15.139197783121933, 23.60195284124035], [14.651256204066057, 23.817338551706705], [14.43795843360769, 23.894546974172496], [13.971431091769212, 24.058882278961025], [13.683292023603535, 24.143974627890177], [13.158678477429296, 24.287560596716624], [12.82790598248486, 24.366929119419627], [12.218077179064208, 24.50559063757963], [11.088677464710102, 24.742808183603362], [10.298788838710195, 24.905531930657766], [9.677754612203481, 25.02806886392744], [9.41963238254352, 25.075119394068338], [8.89386567705074, 25.16814661149454], [8.572391327176042, 25.218695820504205], [8.028944844798025, 25.29401291411033], [7.67270496256588, 25.336225500963927], [-10.01886200718674, 27.42010055167155], [-10.58286676894911, 27.47617650927297], [-10.958162271391595, 27.507445395036488], [-11.53372718106461, 27.546518582081053], [-11.913983946605606, 27.56805188019226], [-12.478557362336172, 27.596427956022854], [-14.394627871329677, 27.68219516944959], [-14.431318475650986, 27.683472069261384], [-14.498339943130848, 27.68573025929118], [-14.545342209203948, 27.687056783885964], [-14.569057405373275, 27.68746337952566], [-14.57840403140283, 27.6874788437127], [-19.057463799147953, 27.574825500918067], [-22.592956457040966, 27.456487386116727], [-22.594735318547055, 27.45604963109944], [-22.642087735861953, 27.440622256521895], [-22.78935143855333, 27.378330195327376], [-23.136733527787296, 27.229849945122268], [-23.638047707704175, 27.00894880948654], [-24.233445245785017, 26.728575907959673], [-24.862287757466643, 26.396767744207924], [-25.472694485463773, 26.01992877449897], [-26.02543597479572, 25.61201958839754], [-26.49238537496588, 25.20319854895999], [-26.852217553530654, 24.84081541197216], [-27.087215870821684, 24.579951389824117], [-27.183759255119067, 24.466939010235603], [-27.190615893539178, 24.443546308587948]]);
					}
				}
				hull() {
					import(file = "tumour_w_spikes_example_case.stl", origin = [0, 0]);
				}
			}
		}
		linear_extrude(height = 4) {
			offset(r = 10) {
				polygon(points = [[-27.191022492710843, 24.44155607335321], [-27.638036300416704, 0.05935525378464019], [-27.612246652653575, -0.09996220740006131], [-27.591693960210485, -0.21999680786912923], [-27.535756885785855, -0.5138720547740043], [-27.431492664862805, -1.0351076503521466], [-26.25775546426791, -6.729483938458988], [-26.124000353650484, -7.346418154679845], [-25.94267918451656, -8.117144743956944], [-25.679573375805095, -9.208817663100008], [-25.45698852979988, -10.119416353080746], [-25.261624151799403, -10.910286475775958], [-25.108636252661586, -11.522501685826485], [-24.220708171921853, -15.073573102232245], [-24.066739688784033, -15.68462017423835], [-23.869316735929534, -16.445819192824604], [-23.584654830981496, -17.515374631476206], [-23.41947265318443, -18.093802429830795], [-23.33438681658186, -18.386938448866367], [-23.17004547143524, -18.88522980558259], [-23.09663565013128, -19.107464008786195], [-22.891711595856165, -19.620429774112296], [-22.60224568943652, -20.19537760396227], [-22.26210260143412, -20.77323712971803], [-22.242687520251863, -20.804312002645904], [-21.846892748942366, -21.371115949657952], [-21.38747481712851, -21.916525260866678], [-21.378454250003067, -21.926663514712367], [-21.35473674560212, -21.95033026589963], [-21.150927303196198, -22.146055739739914], [-20.85883591855977, -22.424295220474917], [-20.852689031897203, -22.429575442122868], [-20.835293727287453, -22.443438849903966], [-20.681860593818826, -22.56245037782816], [-20.270310190457632, -22.872482075844456], [-20.270158206065158, -22.872588907901022], [-20.26926558014436, -22.87317474844255], [-20.26556333381154, -22.875476023702234], [-19.620956433962053, -23.263956416570917], [-18.921155441519637, -23.605012562016746], [-18.18404688870633, -23.908761147091685], [-17.42349441654822, -24.189065812821827], [-16.650603039471797, -24.457031573633643], [-15.872379492769955, -24.71966516482004], [-15.092322737337392, -24.98046554727572], [-14.311781239211607, -25.240781187038177], [-13.531142792547184, -25.500999878261993], [-12.750508752634513, -25.761196535727027], [-11.970035559160959, -26.021276414270517], [-11.19049108862009, -26.28070519524197], [-10.414822907093072, -26.537793440186732], [-9.651476829743302, -26.788498780634132], [-8.919365395710924, -27.025138733451595], [-8.252482907745375, -27.235910571469685], [-7.700131794649113, -27.40607883979723], [-7.318983038936138, -27.52081886403387], [-7.157352189402746, -27.568743778386374], [-6.906159953703547, -27.63012524353892], [-1.0507628725267657, -27.6874923724895], [9.921376934359692, -27.569717548263014], [10.327826319322497, -27.562646276607055], [10.935825382281074, -27.54685963622775], [11.329857967245824, -27.531838686021327], [11.920217429360042, -27.500671004523902], [12.292184607579127, -27.474664977177035], [12.858438125304367, -27.422779648624868], [13.193908756675814, -27.38632545572787], [13.737735615982038, -27.31147667127757], [14.004303683010216, -27.272882483548567], [14.636843066105724, -27.161834264510055], [18.421650913423214, -26.41069471608553], [19.198076802864733, -26.24166402294786], [19.787370021907932, -26.08951769920724], [20.387464946085696, -25.89849747482028], [20.490068563787613, -25.86447146532517], [21.177578431761876, -25.609495739425334], [21.411913547794406, -25.51477339681512], [22.0691273472949, -25.205964197195655], [22.470713748644087, -24.965463211571834], [22.84577487968679, -24.65735850350288], [23.445537435031557, -24.066033981485738], [23.4724307109129, -24.03791176133464], [23.9369144078178, -23.510420622025933], [23.945008286431655, -23.500304006965653], [24.376177923064652, -22.94137122603333], [24.39356793412255, -22.917439494357723], [24.75811258329763, -22.40041027975006], [25.079970129880223, -21.899377795111747], [25.184072456545465, -21.73013279625039], [25.549346822021313, -21.119670388351967], [25.58930728005742, -21.052418269056194], [25.90592861854069, -20.50496600032629], [27.186602758875143, -18.28042164230681], [27.190375515573493, -18.273376877212527], [27.197211059651334, -18.260431132519113], [27.201878299669445, -18.251103379678856], [27.204143986194513, -18.246156753056106], [27.20499901887241, -18.244124489438875], [27.205230438327376, -18.24348518418285], [27.205272278966742, -18.243337384198046], [27.20527627288946, -18.24331472692854], [27.457476632514155, 4.899283874437154], [27.457004179103635, 4.901044532658746], [27.44172945290072, 4.9486235881406095], [23.929419999326353, 15.082134327276268], [23.650878034298835, 15.844449500136996], [23.352091451701764, 16.58652005542816], [23.022166761192956, 17.2974525028076], [22.651409108908034, 17.967551988410925], [22.23415141208808, 18.59115142947922], [21.769673758978154, 19.167525347290677], [21.268803134141738, 19.692043161959788], [21.26380419689791, 19.696933338659516], [20.755414729273177, 20.16064564067512], [20.269864197861207, 20.554655514852534], [19.78900416632247, 20.893768136123228], [19.624983906343477, 21.00198253869063], [18.956546218353953, 21.422394205395452], [18.402170169301883, 21.752565313170898], [17.851092377937427, 22.071971347976763], [16.3338983375694, 22.94936477342848], [15.699626251839437, 23.305614552155532], [15.139197783121933, 23.60195284124035], [14.651256204066057, 23.817338551706705], [14.43795843360769, 23.894546974172496], [13.971431091769212, 24.058882278961025], [13.683292023603535, 24.143974627890177], [13.158678477429296, 24.287560596716624], [12.82790598248486, 24.366929119419627], [12.218077179064208, 24.50559063757963], [11.088677464710102, 24.742808183603362], [10.298788838710195, 24.905531930657766], [9.677754612203481, 25.02806886392744], [9.41963238254352, 25.075119394068338], [8.89386567705074, 25.16814661149454], [8.572391327176042, 25.218695820504205], [8.028944844798025, 25.29401291411033], [7.67270496256588, 25.336225500963927], [-10.01886200718674, 27.42010055167155], [-10.58286676894911, 27.47617650927297], [-10.958162271391595, 27.507445395036488], [-11.53372718106461, 27.546518582081053], [-11.913983946605606, 27.56805188019226], [-12.478557362336172, 27.596427956022854], [-14.394627871329677, 27.68219516944959], [-14.431318475650986, 27.683472069261384], [-14.498339943130848, 27.68573025929118], [-14.545342209203948, 27.687056783885964], [-14.569057405373275, 27.68746337952566], [-14.57840403140283, 27.6874788437127], [-19.057463799147953, 27.574825500918067], [-22.592956457040966, 27.456487386116727], [-22.594735318547055, 27.45604963109944], [-22.642087735861953, 27.440622256521895], [-22.78935143855333, 27.378330195327376], [-23.136733527787296, 27.229849945122268], [-23.638047707704175, 27.00894880948654], [-24.233445245785017, 26.728575907959673], [-24.862287757466643, 26.396767744207924], [-25.472694485463773, 26.01992877449897], [-26.02543597479572, 25.61201958839754], [-26.49238537496588, 25.20319854895999], [-26.852217553530654, 24.84081541197216], [-27.087215870821684, 24.579951389824117], [-27.183759255119067, 24.466939010235603], [-27.190615893539178, 24.443546308587948]]);
			}
		}
		union() {
			translate(v = [-31.235588054369885, 31.571296358592686, 4]) {
				cube(size = [62.47117610873977, 10, 40.216520084998464]);
			}
			translate(v = [-61.235588054369885, 31.571296358592686, 0]) {
				cube(size = [122.47117610873977, 10, 4]);
			}
		}
		union() {
			translate(v = [-66.23558805436988, -10.0000000000, 4]) {
				cube(size = [10, 20, 40.216520084998464]);
			}
			translate(v = [-71.23558805436988, -31.571296358592686, 0]) {
				cube(size = [10, 73.14259271718538, 4]);
			}
			union() {
				translate(v = [61.235588054369885, -10.0000000000, 4]) {
					cube(size = [10, 20, 40.216520084998464]);
				}
				translate(v = [61.235588054369885, -31.571296358592686, 0]) {
					cube(size = [10, 73.14259271718538, 4]);
				}
			}
		}
	}
	translate(v = [-0.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [4.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-5.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [9.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-10.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [14.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-15.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [19.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-20.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [24.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-25.5000000000, -31.571296358592686, 4]) {
		cube(size = [1, 73.14259271718538, 40.216520084998464]);
	}
	translate(v = [-71.23558805436988, -2.5000000000, 25.451564059498924]) {
		cube(size = [142.47117610873977, 1, 40.216520084998464]);
	}
	translate(v = [-22.5000000000, 36.57129635859269, 34.216520084998464]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "1", valign = "center");
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#####################################################################
# AUTHOR        Maria Delgado-Ortet
# CONTACT       md863@cam.ac.uk
# INSTITUTION   Department of Radiology, University of Cambridge
# DATE          Nov 2022 - Feb 2023
#####################################################################
"""This file contains the functions required to build the mould"""

#%% -----------------LIBRARIES--------------
import math
import os

import numpy as np
from scipy.spatial import ConvexHull
from skimage.draw import polygon2mask
from solid import (
    cube,
    hull,
    import_stl,
    linear_extrude,
    offset,
    polygon,
    scad_render_to_file,
    text,
    translate,
)

from utils.tumour_modelling_modules import mesh_and_smooth


#%% -----------------FUNCTIONS--------------
def build_mould(tumour_wcs):
    """
    This is the main function of this script. It calls the other
    functions and models both the tumour and the mould.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS).
    """

    from inputs import mould_id, save_scad_intermediates
    from outputs import dst_dir

    print("TUMOUR MODELLING...")
    tumour_replica_mesh = mesh_and_smooth(tumour_wcs, "tumour_replica")
    print("Tumour modelling complete.\n")

    print("MOULD MODELLING...")
    # Build the mould cavity:
    scad_cavity, cavity_height = build_mould_cavity(tumour_wcs, tumour_replica_mesh)

    # Build the slicing guide:
    scad_slguide = build_slicing_guide(tumour_replica_mesh)

    # Build the perpendicular cutting guides for the slid orientation:
    scad_orguides = build_orientation_guides(tumour_replica_mesh)

    # Ensemble the structures:
    print(
        "\t## Putting the mould together: cavity + slicing guide + orientation guides...",
        end="",
    )
    scad_mould = scad_cavity + scad_slguide + scad_orguides

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the complete mould without slits.
        scad_render_to_file(
            scad_mould,
            os.path.join(dst_dir, "complete_mould_no_slits_" + mould_id + ".scad"),
        )
    print(" OK")

    # Cut the mould structure:
    scad_mould, slicing_slits_positions = carve_slicing_slits(
        scad_mould, tumour_replica_mesh
    )

    # Save the mould:
    scad_render_to_file(
        scad_mould, os.path.join(dst_dir, "mould_" + mould_id + ".scad")
    )

    return cavity_height, slicing_slits_positions


def build_mould_cavity(tumour_wcs, tumour_replica_mesh):
    """
    This function builds the mould cavity of the mould.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS) to create the
                                        spiky tumour.
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_mould <py_scad_obj>:   The mould cavity in SCAD.
            cavity_height <float>:      Cavity height in mm.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_height_pct,
        cavity_wall_thickness,
        mould_id,
        save_scad_intermediates,
    )
    from outputs import dst_dir

    print(
        "\t## Ensuring the mould base will not close after the slice with the largest area...",
    )
    tumour_w_spikes = make_spiky_tumour(tumour_wcs)
    tumour_w_spikes_mesh = mesh_and_smooth(
        tumour_w_spikes, "tumour_w_spikes", save_preproc=False
    )
    print("OK")

    print("\t## Building the mould cavity...", end="")
    # Import the hull of the "spiky" tumour
    tumour_w_spikes_filename = os.path.join(
        dst_dir, "tumour_w_spikes_" + mould_id + ".stl"
    )
    scad_tumour_convex_hull = hull()(
        import_stl(os.path.split(tumour_w_spikes_filename)[-1])
    )

    # Find the convex hull projection on the xy plane of the "spiky" tumour:
    ## The reason the hull extracted above is not used is because the stl file is centered at (0,0) and this is
    ## the reference while building the mould.
    tumour_xy_coords = np.array(
        [tumour_w_spikes_mesh.vertices[:, 0], tumour_w_spikes_mesh.vertices[:, 1]]
    ).T
    tumour_xy_convex_hull_coords = get_xy_convex_hull_coords(tumour_xy_coords)

    # Create the mould base – a block of shape of the convex hull projection and of height = mouldHeight:
    tumour_sz = tumour_replica_mesh.extents
    cavity_height = cavity_height_pct * tumour_sz[2]
    scad_mould_cavity = linear_extrude(height=cavity_height)(
        offset(r=cavity_wall_thickness)(polygon(tumour_xy_convex_hull_coords))
    )

    # Carve the tumour hull inside the base:
    scad_mould = scad_mould_cavity - scad_tumour_convex_hull

    print("\t## Adding the baseplate to the the mould cavity...", end="")
    baseplate_xy_offset += cavity_wall_thickness
    scad_baseplate = linear_extrude(height=baseplate_height)(
        offset(r=baseplate_xy_offset)(polygon(tumour_xy_convex_hull_coords))
    )

    scad_mould = translate([0, 0, baseplate_height])(scad_mould) + scad_baseplate

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the mould cavity with the baseplate.
        scad_render_to_file(
            scad_mould,
            os.path.join(dst_dir, "mould_cavity_w_baseplate_" + mould_id + ".scad"),
        )
    print(" OK")

    return scad_mould, cavity_height


def build_orientation_guides(tumour_replica_mesh):
    """
    This function builds the orientation guides of the mould.
        INPUTS:
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_orguide_left + scad_orguide_right <py_scad_obj>:   The orientation guides in SCAD.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        dist_orguide_baseplate,
        guides_thickness,
        mould_id,
        save_scad_intermediates,
        slguide_height_offset,
    )
    from outputs import dst_dir

    print("\t## Building the orientation guides...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height

    scad_orguide = cube(
        [
            guides_thickness,
            2 * guides_thickness,  # As it is only two "pillars", y = 2*guideSize.
            guides_height,
        ]
    )

    # Place it on the left of the mould and add translate upwards as baseplate offset:
    scad_orguide_left = translate(
        [
            -(tumour_sz[0] + 2 * baseplate_xy_offset) / 2 - baseplate_xy_offset - dist_orguide_baseplate,
            -(2 * guides_thickness) / 2,
            baseplate_height,
        ]
    )(scad_orguide)

    # Place it also on the right of the mould and translate upwards as the baseplate offset:
    scad_orguide_right = translate(
        [
            (tumour_sz[0] + 2 * baseplate_xy_offset) / 2 + dist_orguide_baseplate,
            -(2 * guides_thickness) / 2,
            baseplate_height,
        ]
    )(scad_orguide)
    print(" OK")

    print("\t## Adding the baseplate to the orientation guides...", end="")
    # Create the baseplate for the orientation guides:
    scad_orguide_baseplate = cube(
        [
            guides_thickness,
            tumour_sz[1] + 2 * baseplate_xy_offset + guides_thickness,  # It extends on the y axis to meet with the slicing guide baseplate.
            baseplate_height,
        ]
    )

    # (A) Place the baseplate on the left orientation guide:
    scad_orguide_baseplate_left = translate(
        [
            -(tumour_sz[0] + 2 * baseplate_xy_offset) / 2 - guides_thickness - dist_orguide_baseplate,
            -(tumour_sz[1] + 2 * baseplate_xy_offset) / 2,
            0,
        ]
    )(scad_orguide_baseplate)

    # (B) Add it to the left orientation guide structure:
    scad_orguide_left += scad_orguide_baseplate_left

    # (C) Place the baseplate on the right orientation guide:
    scad_orguide_baseplate_right = translate(
        [
            (tumour_sz[0] + 2 * baseplate_xy_offset) / 2 + dist_orguide_baseplate,
            -(tumour_sz[1] + 2 * baseplate_xy_offset) / 2,
            0,
        ]
    )(scad_orguide_baseplate)

    # (D) Add it to the right orientation guide structure:
    scad_orguide_right += scad_orguide_baseplate_right
    print(" OK")

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the orientation guides.
        scad_render_to_file(
            scad_orguide_left + scad_orguide_right,
            os.path.join(dst_dir, "orientation_guides_" + mould_id + ".scad"),
        )

    return scad_orguide_left + scad_orguide_right


def build_slicing_guide(tumour_replica_mesh):
    """
    This function builds the slicing guide of the mould.
        INPUTS:
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_slguide <py_scad_obj>:   The slicing guide in SCAD.
    """
    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_wall_thickness,
        dist_orguide_baseplate,
        guides_thickness,
        mould_id,
        save_scad_intermediates,
        slguide_height_offset,
    )
    from outputs import dst_dir

    print("\t## Building the slicing guide...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height
    scad_slguide = cube(
        [
            tumour_sz[0] + 2 * cavity_wall_thickness,  # The slicing guide is as wide as the tumour + the mould cavity walls.
            guides_thickness,
            guides_height,
        ]
    )

    # Translate it: Center with respect to the cavity and upwards as the baseplate_height
    scad_slguide = translate(
        [
            -(tumour_sz[0] + 2 * cavity_wall_thickness) / 2,
            (tumour_sz[1] + 2 * baseplate_xy_offset) / 2,
            baseplate_height,
        ]
    )(scad_slguide)
    print(" OK")

    print("\t## Adding the baseplate to the slicing guide...", end="")
    # Create the baseplate for the slicing guide:
    scad_slguide_baseplate = cube(
        [
            tumour_sz[0] + 2 * baseplate_xy_offset + dist_orguide_baseplate * 2,  # It extends on the x axis to meet with the orientation guides baseplate.
            guides_thickness,
            baseplate_height,
        ]
    )

    # Center the baseplate:
    scad_slguide_baseplate = translate(
        [
            -(tumour_sz[0] + 2 * baseplate_xy_offset + dist_orguide_baseplate * 2) / 2,
            (tumour_sz[1] + 2 * baseplate_xy_offset) / 2,
            0,
        ]
    )(scad_slguide_baseplate)

    # Add the baseplate to the slicing guide structure:
    scad_slguide += scad_slguide_baseplate

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the slicing guide.
        scad_render_to_file(
            scad_slguide, os.path.join(dst_dir, "slicing_guide_" + mould_id + ".scad")
        )
    print(" OK")

    return scad_slguide


def carve_slicing_slits(scad_mould, tumour_replica_mesh):
    """
    This function cuts the structure of the mould by carving the
    slicing slits.
        INPUTS:
            scad_mould <py_scad_obj>:               Ensembled mould
                                                    structure.
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_mould <py_scad_obj>:       The complete carved
                                            mould in SCAD.
            slicing_slits_positions <list>: List with the positions
                                            where the slits have
                                            been placed.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_height_pct,
        depth_orslit,
        dist_orguide_baseplate,
        guides_thickness,
        slguide_height_offset,
        slice_thickness,
        slit_thickness,
    )

    print("\t## Carving the slicing slits...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height
    cavity_height = cavity_height_pct * tumour_sz[2]

    # Create the slit structure to be carved from the mould to cut along x (slicing guide):
    scad_slicing_slit = cube(
        [
            slit_thickness,
            guides_thickness + 2 * baseplate_xy_offset + tumour_sz[1],
            guides_height,
        ]
    )

    # Add first cut at the centre:
    scad_slicing_slit_central = translate(
        [
            -slit_thickness / 2,
            -(2 * baseplate_xy_offset + tumour_sz[1]) / 2,
            baseplate_height,
        ]
    )(scad_slicing_slit)
    scad_mould -= scad_slicing_slit_central

    slicing_slits_positions = [
        0
    ]  # Initialise a list to keep the slicing slits positions for the generation of the tumour outlines.

    # Make the rest of the cuts:
    nbr_cuts_each_half_x = math.floor(tumour_sz[0] / 2 / slice_thickness)
    for cut in range(nbr_cuts_each_half_x):
        slit_x_position = slice_thickness * (cut + 1)
        slicing_slits_positions.extend(
            [slit_x_position, -slit_x_position]
        )  # Append the slicing slits positions.
        scad_mould -= translate(
            [
                -slit_thickness / 2 + slit_x_position,  # Cuts on the left.
                -(2 * baseplate_xy_offset + tumour_sz[1]) / 2,
                baseplate_height,
            ]
        )(scad_slicing_slit)
        scad_mould -= translate(
            [
                -slit_thickness / 2 - slit_x_position,  # Cuts on the right.
                -(2 * baseplate_xy_offset + tumour_sz[1]) / 2,
                baseplate_height,
            ]
        )(scad_slicing_slit)
    slicing_slits_positions.sort(
        reverse=True
    )  # Sort the slicing slits positions list. It is reversed so Cranial is first during the tumour outlines printing.

    # Create the slit structure for the orientation slit:
    scad_orientation_slit = cube(
        [
            2 * guides_thickness + 2 * baseplate_xy_offset + tumour_sz[0] + 2 * dist_orguide_baseplate,
            slit_thickness,
            guides_height,
        ]
    )

    # Center it and position to the approrpiate z height:
    scad_orientation_slit = translate(
        [
            -(2 * guides_thickness + 2 * baseplate_xy_offset + tumour_sz[0] + 2 * dist_orguide_baseplate)/ 2,
            -slice_thickness / 2,
            cavity_height - depth_orslit,
        ]
    )(scad_orientation_slit)

    # Cut:
    scad_mould -= scad_orientation_slit

    # Carve the letters
    font = "Liberation Sans"
    character_depth = 10
    character_size = 0.5 * (slice_thickness - slit_thickness)

    start_pos = nbr_cuts_each_half_x * slice_thickness + slice_thickness / 2
    nbr_cuts = nbr_cuts_each_half_x * 2
    for nbr in range(1, nbr_cuts + 1):
        scad_char = translate(
            [
                -start_pos + slice_thickness * nbr,
                (tumour_sz[1] + 2 * baseplate_xy_offset) / 2 + guides_thickness / 2,
                guides_height + baseplate_height - character_depth,
            ]
        )(
            linear_extrude(height=character_depth)(
                text(
                    str(nbr),
                    size=character_size,
                    font=font,
                    halign="center",
                    valign="center",
                )
            )
        )
        scad_mould -= scad_char
        print(" OK")

        return scad_mould, slicing_slits_positions


def get_xy_convex_hull_coords(xy_coords):
    """
    This function returns the coordinates of the convex hull of the input
    points list.
        INPUTS:
            xy_coords <numpy.ndarray>:  (N, 2) array containing the
                                        coordinates of all the points.
        OUTPUTS:
            xy_convex_hull_cords <numpy.ndarray>:   (N, 2) array containing
                                                    the coordinates of the
                                                    points of the convex
                                                    hull.
    """

    xy_convex_hull = ConvexHull(xy_coords, incremental=True)
    xy_convex_hull_coords_idx = xy_convex_hull.vertices

    return xy_coords[xy_convex_hull_coords_idx]


def make_spiky_tumour(tumour_wcs):
    """
    This function makes a copy of the tumour that has the slices above the
    widest surface equal to it.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS).
        OUTPUTS:
            tumour_w_spikes <np.ndarray>:   Boolean array of the tumour
                                            in the World Coordinate
                                            System (WCS) with the surfaces
                                            above the widest equal to the
                                            widest surface.
    """

    # Find the slice with the maximum area:
    max_area = np.sum(tumour_wcs[:, :, 0])
    max_area_slice_idx = 0
    for z in range(tumour_wcs.shape[2]):
        slice_area = np.sum(tumour_wcs[:, :, z])
        if slice_area > max_area:
            max_area = slice_area
            max_area_slice_idx = z

    # Create a mask of the convex hull projection on the xy plane:
    tumour_voxels = np.argwhere(tumour_wcs)
    tumour_xy_coords = tumour_voxels[:, [0, 1]]  # Keep all points x and y coordinates
    tumour_xy_convex_hull_coords = get_xy_convex_hull_coords(tumour_xy_coords)
    tumour_xy_convex_hull_mask = polygon2mask(
        image_shape=(tumour_wcs.shape[0], tumour_wcs.shape[1]),
        polygon=tumour_xy_convex_hull_coords,
    )

    # Replace all the slices above the slice with the maximum area with the mask created above:
    tumour_w_spikes = (
        tumour_wcs.copy()
    )  # The output is a tumour with "spiky" appearance, here the reason of the variable name.
    for z in range(max_area_slice_idx + 1, tumour_w_spikes.shape[2]):
        tumour_w_spikes[:, :, z] = tumour_xy_convex_hull_mask

    return tumour_w_spikes
 
 
************************************************/
