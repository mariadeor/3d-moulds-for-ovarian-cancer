// Generated by SolidPython 1.1.1 on 2023-03-20 08:57:55


difference() {
	union() {
		translate(v = [0, 0, 4]) {
			difference() {
				linear_extrude(height = 27.09145752767895) {
					offset(r = 5) {
						polygon(points = [[-27.200717482573676, 25.49075533274982], [-27.679474696519733, 1.0685741466021963], [-27.64499286658008, 0.7662541170214495], [-27.606303914621183, 0.44391252237663215], [-27.565071835200445, 0.13005288323982167], [-27.52984534909007, -0.13372562320180173], [-27.466007818123867, -0.5565908936126368], [-27.42234251785823, -0.8399685592660406], [-27.295476234947127, -1.5639087222811245], [-27.177881599875693, -2.1667619551783646], [-26.420854835777074, -5.935113975184105], [-26.254880228343673, -6.716815707874606], [-26.109793802404166, -7.318342344169441], [-23.592700574156286, -16.480138578930816], [-23.42745902603401, -17.058760588525082], [-23.342344173952508, -17.351996571107154], [-23.17794678607272, -17.850457852254284], [-23.104511930976898, -18.072767840478022], [-22.89951799468832, -18.58590853441681], [-22.609953376282704, -19.161052429643927], [-22.269703770680792, -19.739118489731737], [-22.2502882261162, -19.770210117068846], [-21.85444348964015, -20.33729231225774], [-21.395341873970967, -20.883360646467942], [-21.386326928396798, -20.893510665267808], [-21.362645253311722, -20.91722567751984], [-21.15935104929047, -21.11356443056221], [-20.86998890158113, -21.391442364954006], [-20.868286658187348, -21.39306771900418], [-20.862151389153414, -21.398362000879622], [-20.844823741591227, -21.41229234122814], [-20.692639393241567, -21.53245240991466], [-20.284505090642902, -21.846352268648936], [-20.284353054421594, -21.846459137136755], [-20.283461811637608, -21.84704686499316], [-19.64596816461407, -22.248998377008302], [-18.966109519291894, -22.610351816643828], [-18.25951040204237, -22.944964784352003], [-17.538249430254368, -23.2649158975217], [-16.80843644469468, -23.576314996919706], [-16.071182325502715, -23.880272962685435], [-10.867069247149107, -25.962429331138637], [-10.126801534959892, -26.255270230032988], [-7.03272208423145, -27.4510742476918], [-6.89165987808642, -27.505112206288118], [-1.05111497905393, -27.696933864067994], [9.306324427083087, -27.585686820770608], [9.924633006021306, -27.57899776207452], [10.33104937696429, -27.57178204837129], [10.938665854361625, -27.555435080901564], [11.33194265723456, -27.539710957287188], [11.92010824617776, -27.506353512398803], [12.289098717772452, -27.478059812391358], [12.84816501531083, -27.419706863008642], [13.175719959451216, -27.37784075959691], [13.701227985012133, -27.287676781377233], [13.953273054740512, -27.24049946782057], [14.534640244247083, -27.095238888518416], [15.130966120404807, -26.900925246827082], [15.225023601970868, -26.870171124825756], [15.922967134818496, -26.618529643947202], [19.832784965327953, -25.145415293956944], [20.522604331938748, -24.879423232290335], [21.19833333357288, -24.597769322084513], [21.429268455850867, -24.49838593967568], [22.07993148583745, -24.17805998401987], [22.479478241993743, -23.934215110055657], [22.853972810938778, -23.62505048036626], [23.453608698761162, -23.033113916413793], [23.480507811953693, -23.004976007964405], [23.945084685175647, -22.47723337398676], [23.953180895231547, -22.467112880331502], [24.384490546001313, -21.907982474547097], [24.401886487300004, -21.884042581811038], [24.76655545137883, -21.366837052896766], [25.088522755956806, -20.865633709063992], [25.192660582994222, -20.696330995253895], [25.558059512217444, -20.08566041100272], [25.598033597337377, -20.018385357778957], [25.914762908194692, -19.470746400048824], [27.19587377660304, -17.245443440803488], [27.199647819865017, -17.23839627334424], [27.206485694960485, -17.225446113967987], [27.211154526573743, -17.21611518023151], [27.213420985730096, -17.211166866738814], [27.214276309986282, -17.209133910090824], [27.21450780835858, -17.20849438682263], [27.2145496632662, -17.208346536435933], [27.214553658550898, -17.208323871439973], [27.46682920739257, 4.900943785144758], [27.46635757060581, 4.902706021512891], [27.4510742476918, 4.95029791431606], [23.65962219086681, 14.809319468726393], [23.36083069940026, 15.551740062217538], [23.03304170969136, 16.265163157466333], [22.669431243740835, 16.942764776473503], [22.270343145401363, 17.584888763091723], [21.844109015718555, 18.199866718366614], [21.403697939494638, 18.800667727100393], [20.51844108299819, 19.99783504051934], [20.071823184408025, 20.592429226886864], [19.60911958198734, 21.166474812133778], [19.607571721435512, 21.16836077061098], [19.607173465687946, 21.168827576093932], [19.607096176243573, 21.16891430368011], [19.14298082539399, 21.680364799785764], [18.667855744417736, 22.134925858895528], [18.638906674621065, 22.159261531342647], [18.182345504755425, 22.53304906573848], [17.72361996651536, 22.827198009922952], [17.528630239428114, 22.93270745880495], [17.03482107464815, 23.187285241152402], [16.793162068717198, 23.302446170477126], [16.106877017174043, 23.609163957655696], [16.01348615900606, 23.650108444025538], [15.400006013784822, 23.91025710733547], [14.794459279391505, 24.160103132188326], [14.588721117779757, 24.243231846025637], [13.910540429031219, 24.51452296372098], [13.247277835306154, 24.76667052041842], [12.697915004400537, 24.943946566708842], [12.461980144648326, 25.007247618220713], [11.968914020810391, 25.129972746752], [11.662122927581295, 25.19270146936084], [11.134760916557903, 25.28338364800698], [10.785639581304633, 25.332025911311316], [-6.898642326576567, 27.429451195463646], [-7.462839421974414, 27.48554627576317], [-7.838262905514323, 27.516825824660906], [-8.414024090997467, 27.555912336217297], [-8.794410529497082, 27.577452977489042], [-9.359176472782208, 27.605838729964574], [-11.275900389037165, 27.69163519122942], [-11.312603505375735, 27.692912526482186], [-11.379647828128052, 27.69517148658686], [-11.426666122641553, 27.696498463545378], [-16.008171775553123, 27.82216699253729], [-17.05972262738948, 27.846004361399363], [-17.617232165983033, 27.852466454330603], [-18.18520903282967, 27.85472417284741], [-18.756133056569592, 27.850349640618543], [-19.29374907670157, 27.842646156423932], [-20.355098391693215, 27.8089120453476], [-21.07249711028696, 27.77753376196733], [-24.7096162966563, 27.551315898093822], [-24.806602947187496, 27.524865432146047], [-24.93903697795353, 27.449384844415555], [-25.241479864523658, 27.263860095028544], [-25.65337921148978, 26.979808532420787], [-26.102750960455325, 26.62335700293418], [-26.524224381891848, 26.23900714591856], [-26.867517994861068, 25.88634984931389], [-27.09772367557477, 25.628587894070453], [-27.193307023206636, 25.516256623205788], [-27.200282436003008, 25.492765543162864]]);
					}
				}
				hull() {
					import(file = "tumour_w_spikes_example_case.stl", origin = [0, 0]);
				}
			}
		}
		linear_extrude(height = 4) {
			offset(r = 10) {
				polygon(points = [[-27.200717482573676, 25.49075533274982], [-27.679474696519733, 1.0685741466021963], [-27.64499286658008, 0.7662541170214495], [-27.606303914621183, 0.44391252237663215], [-27.565071835200445, 0.13005288323982167], [-27.52984534909007, -0.13372562320180173], [-27.466007818123867, -0.5565908936126368], [-27.42234251785823, -0.8399685592660406], [-27.295476234947127, -1.5639087222811245], [-27.177881599875693, -2.1667619551783646], [-26.420854835777074, -5.935113975184105], [-26.254880228343673, -6.716815707874606], [-26.109793802404166, -7.318342344169441], [-23.592700574156286, -16.480138578930816], [-23.42745902603401, -17.058760588525082], [-23.342344173952508, -17.351996571107154], [-23.17794678607272, -17.850457852254284], [-23.104511930976898, -18.072767840478022], [-22.89951799468832, -18.58590853441681], [-22.609953376282704, -19.161052429643927], [-22.269703770680792, -19.739118489731737], [-22.2502882261162, -19.770210117068846], [-21.85444348964015, -20.33729231225774], [-21.395341873970967, -20.883360646467942], [-21.386326928396798, -20.893510665267808], [-21.362645253311722, -20.91722567751984], [-21.15935104929047, -21.11356443056221], [-20.86998890158113, -21.391442364954006], [-20.868286658187348, -21.39306771900418], [-20.862151389153414, -21.398362000879622], [-20.844823741591227, -21.41229234122814], [-20.692639393241567, -21.53245240991466], [-20.284505090642902, -21.846352268648936], [-20.284353054421594, -21.846459137136755], [-20.283461811637608, -21.84704686499316], [-19.64596816461407, -22.248998377008302], [-18.966109519291894, -22.610351816643828], [-18.25951040204237, -22.944964784352003], [-17.538249430254368, -23.2649158975217], [-16.80843644469468, -23.576314996919706], [-16.071182325502715, -23.880272962685435], [-10.867069247149107, -25.962429331138637], [-10.126801534959892, -26.255270230032988], [-7.03272208423145, -27.4510742476918], [-6.89165987808642, -27.505112206288118], [-1.05111497905393, -27.696933864067994], [9.306324427083087, -27.585686820770608], [9.924633006021306, -27.57899776207452], [10.33104937696429, -27.57178204837129], [10.938665854361625, -27.555435080901564], [11.33194265723456, -27.539710957287188], [11.92010824617776, -27.506353512398803], [12.289098717772452, -27.478059812391358], [12.84816501531083, -27.419706863008642], [13.175719959451216, -27.37784075959691], [13.701227985012133, -27.287676781377233], [13.953273054740512, -27.24049946782057], [14.534640244247083, -27.095238888518416], [15.130966120404807, -26.900925246827082], [15.225023601970868, -26.870171124825756], [15.922967134818496, -26.618529643947202], [19.832784965327953, -25.145415293956944], [20.522604331938748, -24.879423232290335], [21.19833333357288, -24.597769322084513], [21.429268455850867, -24.49838593967568], [22.07993148583745, -24.17805998401987], [22.479478241993743, -23.934215110055657], [22.853972810938778, -23.62505048036626], [23.453608698761162, -23.033113916413793], [23.480507811953693, -23.004976007964405], [23.945084685175647, -22.47723337398676], [23.953180895231547, -22.467112880331502], [24.384490546001313, -21.907982474547097], [24.401886487300004, -21.884042581811038], [24.76655545137883, -21.366837052896766], [25.088522755956806, -20.865633709063992], [25.192660582994222, -20.696330995253895], [25.558059512217444, -20.08566041100272], [25.598033597337377, -20.018385357778957], [25.914762908194692, -19.470746400048824], [27.19587377660304, -17.245443440803488], [27.199647819865017, -17.23839627334424], [27.206485694960485, -17.225446113967987], [27.211154526573743, -17.21611518023151], [27.213420985730096, -17.211166866738814], [27.214276309986282, -17.209133910090824], [27.21450780835858, -17.20849438682263], [27.2145496632662, -17.208346536435933], [27.214553658550898, -17.208323871439973], [27.46682920739257, 4.900943785144758], [27.46635757060581, 4.902706021512891], [27.4510742476918, 4.95029791431606], [23.65962219086681, 14.809319468726393], [23.36083069940026, 15.551740062217538], [23.03304170969136, 16.265163157466333], [22.669431243740835, 16.942764776473503], [22.270343145401363, 17.584888763091723], [21.844109015718555, 18.199866718366614], [21.403697939494638, 18.800667727100393], [20.51844108299819, 19.99783504051934], [20.071823184408025, 20.592429226886864], [19.60911958198734, 21.166474812133778], [19.607571721435512, 21.16836077061098], [19.607173465687946, 21.168827576093932], [19.607096176243573, 21.16891430368011], [19.14298082539399, 21.680364799785764], [18.667855744417736, 22.134925858895528], [18.638906674621065, 22.159261531342647], [18.182345504755425, 22.53304906573848], [17.72361996651536, 22.827198009922952], [17.528630239428114, 22.93270745880495], [17.03482107464815, 23.187285241152402], [16.793162068717198, 23.302446170477126], [16.106877017174043, 23.609163957655696], [16.01348615900606, 23.650108444025538], [15.400006013784822, 23.91025710733547], [14.794459279391505, 24.160103132188326], [14.588721117779757, 24.243231846025637], [13.910540429031219, 24.51452296372098], [13.247277835306154, 24.76667052041842], [12.697915004400537, 24.943946566708842], [12.461980144648326, 25.007247618220713], [11.968914020810391, 25.129972746752], [11.662122927581295, 25.19270146936084], [11.134760916557903, 25.28338364800698], [10.785639581304633, 25.332025911311316], [-6.898642326576567, 27.429451195463646], [-7.462839421974414, 27.48554627576317], [-7.838262905514323, 27.516825824660906], [-8.414024090997467, 27.555912336217297], [-8.794410529497082, 27.577452977489042], [-9.359176472782208, 27.605838729964574], [-11.275900389037165, 27.69163519122942], [-11.312603505375735, 27.692912526482186], [-11.379647828128052, 27.69517148658686], [-11.426666122641553, 27.696498463545378], [-16.008171775553123, 27.82216699253729], [-17.05972262738948, 27.846004361399363], [-17.617232165983033, 27.852466454330603], [-18.18520903282967, 27.85472417284741], [-18.756133056569592, 27.850349640618543], [-19.29374907670157, 27.842646156423932], [-20.355098391693215, 27.8089120453476], [-21.07249711028696, 27.77753376196733], [-24.7096162966563, 27.551315898093822], [-24.806602947187496, 27.524865432146047], [-24.93903697795353, 27.449384844415555], [-25.241479864523658, 27.263860095028544], [-25.65337921148978, 26.979808532420787], [-26.102750960455325, 26.62335700293418], [-26.524224381891848, 26.23900714591856], [-26.867517994861068, 25.88634984931389], [-27.09772367557477, 25.628587894070453], [-27.193307023206636, 25.516256623205788], [-27.200282436003008, 25.492765543162864]]);
			}
		}
		union() {
			translate(v = [-31.236872243396927, 36.646411351963714, 4]) {
				cube(size = [62.473744486793855, 10, 39.702082182398506]);
			}
			translate(v = [-66.23687224339693, 36.646411351963714, 0]) {
				cube(size = [132.47374448679386, 10, 4]);
			}
		}
		union() {
			translate(v = [-76.23687224339693, -10, 4]) {
				cube(size = [10, 20, 39.702082182398506]);
			}
			translate(v = [-76.23687224339693, -36.646411351963714, 0]) {
				cube(size = [10, 83.29282270392743, 4]);
			}
			union() {
				translate(v = [66.23687224339693, -10, 4]) {
					cube(size = [10, 20, 39.702082182398506]);
				}
				translate(v = [66.23687224339693, -36.646411351963714, 0]) {
					cube(size = [10, 83.29282270392743, 4]);
				}
			}
		}
	}
	translate(v = [-0.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [4.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-5.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [9.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-10.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [14.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-15.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [19.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-20.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [24.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-25.5000000000, -36.646411351963714, 4]) {
		cube(size = [1, 83.29282270392743, 39.702082182398506]);
	}
	translate(v = [-76.23687224339693, -0.5000000000, 25.09145752767895]) {
		cube(size = [152.47374448679386, 1, 39.702082182398506]);
	}
	translate(v = [-22.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "1", valign = "center");
		}
	}
	translate(v = [-17.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "2", valign = "center");
		}
	}
	translate(v = [-12.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "3", valign = "center");
		}
	}
	translate(v = [-7.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "4", valign = "center");
		}
	}
	translate(v = [-2.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "5", valign = "center");
		}
	}
	translate(v = [2.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "6", valign = "center");
		}
	}
	translate(v = [7.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "7", valign = "center");
		}
	}
	translate(v = [12.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "8", valign = "center");
		}
	}
	translate(v = [17.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "9", valign = "center");
		}
	}
	translate(v = [22.5000000000, 41.646411351963714, 33.702082182398506]) {
		linear_extrude(height = 10) {
			text(font = "Liberation Sans", halign = "center", size = 2.0000000000, text = "10", valign = "center");
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#####################################################################
# AUTHOR        Maria Delgado-Ortet
# CONTACT       md863@cam.ac.uk
# INSTITUTION   Department of Radiology, University of Cambridge
# DATE          Nov 2022 - Feb 2023
#####################################################################
"""This file contains the functions required to build the mould"""

#%% -----------------LIBRARIES--------------
import math
import os

import numpy as np
from scipy.spatial import ConvexHull
from skimage.draw import polygon2mask
from solid import (
    cube,
    hull,
    import_stl,
    linear_extrude,
    offset,
    polygon,
    scad_render_to_file,
    text,
    translate,
)

from utils.tumour_modelling_modules import mesh_and_smooth


#%% -----------------FUNCTIONS--------------
def build_mould(tumour_wcs):
    """
    This is the main function of this script. It calls the other
    functions and models both the tumour and the mould.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS).
    """

    from inputs import mould_id, save_scad_intermediates
    from outputs import dst_dir

    print("TUMOUR MODELLING...")
    tumour_replica_mesh = mesh_and_smooth(tumour_wcs, "tumour_replica")
    print("Tumour modelling complete.\n")

    print("MOULD MODELLING...")
    # Build the mould cavity:
    scad_cavity, cavity_height = build_mould_cavity(tumour_wcs, tumour_replica_mesh)

    # Build the slicing guide:
    scad_slguide = build_slicing_guide(tumour_replica_mesh)

    # Build the perpendicular cutting guides for the slid orientation:
    scad_orguides = build_orientation_guides(tumour_replica_mesh)

    # Ensemble the structures:
    print(
        "\t## Putting the mould together: cavity + slicing guide + orientation guides...",
        end="",
    )
    scad_mould = scad_cavity + scad_slguide + scad_orguides

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the complete mould without slits.
        scad_render_to_file(
            scad_mould,
            os.path.join(dst_dir, "complete_mould_no_slits_" + mould_id + ".scad"),
        )
    print(" OK")

    # Cut the mould structure:
    scad_mould, slicing_slits_positions = carve_slicing_slits(
        scad_mould, tumour_replica_mesh
    )

    # Save the mould:
    scad_render_to_file(
        scad_mould, os.path.join(dst_dir, "mould_" + mould_id + ".scad")
    )

    return cavity_height, slicing_slits_positions


def build_mould_cavity(tumour_wcs, tumour_replica_mesh):
    """
    This function builds the mould cavity of the mould.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS) to create the
                                        spiky tumour.
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_mould <py_scad_obj>:   The mould cavity in SCAD.
            cavity_height <float>:      Cavity height in mm.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_height_pct,
        cavity_wall_thickness,
        mould_id,
        save_scad_intermediates,
    )
    from outputs import dst_dir

    print(
        "\t## Ensuring the mould base will not close after the slice with the largest area...",
    )
    tumour_w_spikes = make_spiky_tumour(tumour_wcs)
    tumour_w_spikes_mesh = mesh_and_smooth(
        tumour_w_spikes, "tumour_w_spikes", save_preproc=False
    )
    print("OK")

    print("\t## Building the mould cavity...", end="")
    # Import the hull of the "spiky" tumour
    tumour_w_spikes_filename = os.path.join(
        dst_dir, "tumour_w_spikes_" + mould_id + ".stl"
    )
    scad_tumour_convex_hull = hull()(
        import_stl(os.path.split(tumour_w_spikes_filename)[-1])
    )

    # Find the convex hull projection on the xy plane of the "spiky" tumour:
    ## The reason the hull extracted above is not used is because the stl file is centered at (0,0) and this is
    ## the reference while building the mould.
    tumour_xy_coords = np.array(
        [tumour_w_spikes_mesh.vertices[:, 0], tumour_w_spikes_mesh.vertices[:, 1]]
    ).T
    tumour_xy_convex_hull_coords = get_xy_convex_hull_coords(tumour_xy_coords)

    # Create the mould base – a block of shape of the convex hull projection and of height = mouldHeight:
    tumour_sz = tumour_replica_mesh.extents
    cavity_height = cavity_height_pct * tumour_sz[2]
    scad_mould_cavity = linear_extrude(height=cavity_height)(
        offset(r=cavity_wall_thickness)(polygon(tumour_xy_convex_hull_coords))
    )

    # Carve the tumour hull inside the base:
    scad_mould = scad_mould_cavity - scad_tumour_convex_hull

    print("\t## Adding the baseplate to the the mould cavity...", end="")
    baseplate_xy_offset += cavity_wall_thickness
    scad_baseplate = linear_extrude(height=baseplate_height)(
        offset(r=baseplate_xy_offset)(polygon(tumour_xy_convex_hull_coords))
    )

    scad_mould = translate([0, 0, baseplate_height])(scad_mould) + scad_baseplate

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the mould cavity with the baseplate.
        scad_render_to_file(
            scad_mould,
            os.path.join(dst_dir, "mould_cavity_w_baseplate_" + mould_id + ".scad"),
        )
    print(" OK")

    return scad_mould, cavity_height


def build_orientation_guides(tumour_replica_mesh):
    """
    This function builds the orientation guides of the mould.
        INPUTS:
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_orguide_left + scad_orguide_right <py_scad_obj>:   The orientation guides in SCAD.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_wall_thickness,
        dist_orguide_baseplate,
        guides_thickness,
        mould_id,
        save_scad_intermediates,
        slguide_height_offset,
    )
    from outputs import dst_dir

    print("\t## Building the orientation guides...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height

    scad_orguide = cube(
        [
            guides_thickness,
            2 * guides_thickness,  # As it is only two "pillars", y = 2*guide_thickness.
            guides_height,
        ]
    )

    # Place it on the left of the mould and add translate upwards as baseplate offset:
    scad_orguide_left = translate(
        [
            -(tumour_sz[0] / 2 + cavity_wall_thickness + baseplate_xy_offset + dist_orguide_baseplate + guides_thickness),
            -guides_thickness,
            baseplate_height,
        ]
    )(scad_orguide)

    # Place it also on the right of the mould and translate upwards as the baseplate offset:
    scad_orguide_right = translate(
        [
            tumour_sz[0] / 2 + cavity_wall_thickness + baseplate_xy_offset + dist_orguide_baseplate,
            -guides_thickness,
            baseplate_height,
        ]
    )(scad_orguide)
    print(" OK")

    print("\t## Adding the baseplate to the orientation guides...", end="")
    # Create the baseplate for the orientation guides:
    scad_orguide_baseplate = cube(
        [
            guides_thickness,
            tumour_sz[1] + 2 * (cavity_wall_thickness + baseplate_xy_offset) + guides_thickness,  # It extends on the y axis to meet with the slicing guide baseplate.
            baseplate_height,
        ]
    )

    # (A) Place the baseplate on the left orientation guide:
    scad_orguide_baseplate_left = translate(
        [
            -(tumour_sz[0] / 2 + cavity_wall_thickness + baseplate_xy_offset + dist_orguide_baseplate + guides_thickness),
            -(tumour_sz[1] + 2 * (cavity_wall_thickness + baseplate_xy_offset)) / 2,
            0,
        ]
    )(scad_orguide_baseplate)

    # (B) Add it to the left orientation guide structure:
    scad_orguide_left += scad_orguide_baseplate_left

    # (C) Place the baseplate on the right orientation guide:
    scad_orguide_baseplate_right = translate(
        [
            (tumour_sz[0] / 2 + cavity_wall_thickness + baseplate_xy_offset + dist_orguide_baseplate),
            -(tumour_sz[1] + 2 * (cavity_wall_thickness + baseplate_xy_offset)) / 2,
            0,
        ]
    )(scad_orguide_baseplate)

    # (D) Add it to the right orientation guide structure:
    scad_orguide_right += scad_orguide_baseplate_right
    print(" OK")

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the orientation guides.
        scad_render_to_file(
            scad_orguide_left + scad_orguide_right,
            os.path.join(dst_dir, "orientation_guides_" + mould_id + ".scad"),
        )

    return scad_orguide_left + scad_orguide_right


def build_slicing_guide(tumour_replica_mesh):
    """
    This function builds the slicing guide of the mould.
        INPUTS:
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_slguide <py_scad_obj>:   The slicing guide in SCAD.
    """
    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_wall_thickness,
        dist_orguide_baseplate,
        guides_thickness,
        mould_id,
        save_scad_intermediates,
        slguide_height_offset,
    )
    from outputs import dst_dir

    print("\t## Building the slicing guide...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height
    scad_slguide = cube(
        [
            tumour_sz[0] + 2 * cavity_wall_thickness,  # The slicing guide is as wide as the tumour + the mould cavity walls.
            guides_thickness,
            guides_height,
        ]
    )

    # Translate it: Center with respect to the cavity and upwards as the baseplate_height
    scad_slguide = translate(
        [
            -(tumour_sz[0] + 2 * cavity_wall_thickness) / 2,
            tumour_sz[1] / 2 + cavity_wall_thickness + baseplate_xy_offset,
            baseplate_height,
        ]
    )(scad_slguide)
    print(" OK")

    print("\t## Adding the baseplate to the slicing guide...", end="")
    # Create the baseplate for the slicing guide:
    scad_slguide_baseplate = cube(
        [
            tumour_sz[0] + 2 * cavity_wall_thickness + 2 * baseplate_xy_offset + 2 * dist_orguide_baseplate,  # It extends on the x axis to meet with the orientation guides baseplate.
            guides_thickness,
            baseplate_height,
        ]
    )

    # Center the baseplate:
    scad_slguide_baseplate = translate(
        [
            -(tumour_sz[0] + 2 * cavity_wall_thickness + 2 * baseplate_xy_offset + 2 * dist_orguide_baseplate) / 2,
            tumour_sz[1] / 2 + cavity_wall_thickness + baseplate_xy_offset,
            0,
        ]
    )(scad_slguide_baseplate)

    # Add the baseplate to the slicing guide structure:
    scad_slguide += scad_slguide_baseplate

    if (
        save_scad_intermediates
    ):  # OPT: Add "--save_scad_intermediates" to the command line to save the scad file of the slicing guide.
        scad_render_to_file(
            scad_slguide, os.path.join(dst_dir, "slicing_guide_" + mould_id + ".scad")
        )
    print(" OK")

    return scad_slguide


def carve_slicing_slits(scad_mould, tumour_replica_mesh):
    """
    This function cuts the structure of the mould by carving the
    slicing slits.
        INPUTS:
            scad_mould <py_scad_obj>:               Ensembled mould
                                                    structure.
            tumour_replica_mesh <trimesh.Trimesh>:  Smoothed tumour
                                                    to fit in the
                                                    mould.
        OUTPUTS:
            scad_mould <py_scad_obj>:       The complete carved
                                            mould in SCAD.
            slicing_slits_positions <list>: List with the positions
                                            where the slits have
                                            been placed.
    """

    from inputs import (
        baseplate_height,
        baseplate_xy_offset,
        cavity_height_pct,
        cavity_wall_thickness,
        depth_orslit,
        dist_orguide_baseplate,
        guides_thickness,
        slguide_height_offset,
        slice_thickness,
        slit_thickness,
    )

    print("\t## Carving the slicing slits...", end="")
    tumour_sz = tumour_replica_mesh.extents
    guides_height = tumour_sz[2] + slguide_height_offset - baseplate_height
    cavity_height = cavity_height_pct * tumour_sz[2]

    # Create the slit structure to be carved from the mould to cut along x (slicing guide):
    scad_slicing_slit = cube(
        [
            slit_thickness,
            guides_thickness + 2 * (cavity_wall_thickness + baseplate_xy_offset) + tumour_sz[1],
            guides_height,
        ]
    )

    # Add first cut at the centre:
    scad_slicing_slit_central = translate(
        [
            -slit_thickness / 2,
            -(2 * (cavity_wall_thickness + baseplate_xy_offset) + tumour_sz[1]) / 2,
            baseplate_height,
        ]
    )(scad_slicing_slit)
    scad_mould -= scad_slicing_slit_central

    slicing_slits_positions = [0]  # Initialise a list to keep the slicing slits positions for the generation of the tumour outlines.

    # Make the rest of the cuts:
    nbr_cuts_each_half_x = math.floor(tumour_sz[0] / 2 / slice_thickness)
    for cut in range(nbr_cuts_each_half_x):
        slit_x_position = slice_thickness * (cut + 1)
        slicing_slits_positions.extend(
            [slit_x_position, -slit_x_position]
        )  # Append the slicing slits positions.
        scad_mould -= translate(
            [
                -slit_thickness / 2 + slit_x_position,  # Cuts on the left.
                -(2 * (cavity_wall_thickness + baseplate_xy_offset) + tumour_sz[1]) / 2,
                baseplate_height,
            ]
        )(scad_slicing_slit)
        scad_mould -= translate(
            [
                -slit_thickness / 2 - slit_x_position,  # Cuts on the right.
                -(2 * (cavity_wall_thickness + baseplate_xy_offset) + tumour_sz[1]) / 2,
                baseplate_height,
            ]
        )(scad_slicing_slit)
    slicing_slits_positions.sort(
        reverse=True
    )  # Sort the slicing slits positions list. It is reversed so Cranial is first during the tumour outlines printing.

    # Create the slit structure for the orientation slit:
    scad_orientation_slit = cube(
        [
            2 * guides_thickness + 2 * baseplate_xy_offset + 2 * cavity_wall_thickness + tumour_sz[0] + 2 * dist_orguide_baseplate,
            slit_thickness,
            guides_height,
        ]
    )

    # Center it and position to the approrpiate z height:
    scad_orientation_slit = translate(
        [
            -(2 * guides_thickness + 2 * baseplate_xy_offset + 2 * cavity_wall_thickness + tumour_sz[0] + 2 * dist_orguide_baseplate)/ 2,
            -slit_thickness / 2,
            cavity_height - depth_orslit,
        ]
    )(scad_orientation_slit)

    # Cut:
    scad_mould -= scad_orientation_slit

    # Carve the letters
    font = "Liberation Sans"
    character_depth = 10
    character_size = 0.5 * (slice_thickness - slit_thickness)

    start_pos = nbr_cuts_each_half_x * slice_thickness + slice_thickness / 2
    nbr_cuts = nbr_cuts_each_half_x * 2
    for nbr in range(1, nbr_cuts + 1):
        scad_char = translate(
            [
                -start_pos + slice_thickness * nbr,
                (tumour_sz[1] + 2 * baseplate_xy_offset + 2 * cavity_wall_thickness) / 2 + guides_thickness / 2,
                guides_height + baseplate_height - character_depth,
            ]
        )(
            linear_extrude(height=character_depth)(
                text(
                    str(nbr),
                    size=character_size,
                    font=font,
                    halign="center",
                    valign="center",
                )
            )
        )
        scad_mould -= scad_char
    print(" OK")

    return scad_mould, slicing_slits_positions


def get_xy_convex_hull_coords(xy_coords):
    """
    This function returns the coordinates of the convex hull of the input
    points list.
        INPUTS:
            xy_coords <numpy.ndarray>:  (N, 2) array containing the
                                        coordinates of all the points.
        OUTPUTS:
            xy_convex_hull_cords <numpy.ndarray>:   (N, 2) array containing
                                                    the coordinates of the
                                                    points of the convex
                                                    hull.
    """

    xy_convex_hull = ConvexHull(xy_coords, incremental=True)
    xy_convex_hull_coords_idx = xy_convex_hull.vertices

    return xy_coords[xy_convex_hull_coords_idx]


def make_spiky_tumour(tumour_wcs):
    """
    This function makes a copy of the tumour that has the slices above the
    widest surface equal to it.
        INPUTS:
            tumour_wcs <np.ndarray>:    Boolean array of the tumour
                                        in the World Coordinate
                                        System (WCS).
        OUTPUTS:
            tumour_w_spikes <np.ndarray>:   Boolean array of the tumour
                                            in the World Coordinate
                                            System (WCS) with the surfaces
                                            above the widest equal to the
                                            widest surface.
    """

    # Find the slice with the maximum area:
    max_area = np.sum(tumour_wcs[:, :, 0])
    max_area_slice_idx = 0
    for z in range(tumour_wcs.shape[2]):
        slice_area = np.sum(tumour_wcs[:, :, z])
        if slice_area > max_area:
            max_area = slice_area
            max_area_slice_idx = z

    # Create a mask of the convex hull projection on the xy plane:
    tumour_voxels = np.argwhere(tumour_wcs)
    tumour_xy_coords = tumour_voxels[:, [0, 1]]  # Keep all points x and y coordinates
    tumour_xy_convex_hull_coords = get_xy_convex_hull_coords(tumour_xy_coords)
    tumour_xy_convex_hull_mask = polygon2mask(
        image_shape=(tumour_wcs.shape[0], tumour_wcs.shape[1]),
        polygon=tumour_xy_convex_hull_coords,
    )

    # Replace all the slices above the slice with the maximum area with the mask created above:
    tumour_w_spikes = (
        tumour_wcs.copy()
    )  # The output is a tumour with "spiky" appearance, here the reason of the variable name.
    for z in range(max_area_slice_idx + 1, tumour_w_spikes.shape[2]):
        tumour_w_spikes[:, :, z] = tumour_xy_convex_hull_mask

    return tumour_w_spikes
 
 
************************************************/
